if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
n = 0
s = 0
n = 1
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1)
if(((n-1)/2) %% 2 == 0)
s = s + 4/n
n = n + 2
if(((n-1)/2) %% 2 == 1)
s = s - 4/n
n = n + 2
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
fage
fage -2 -4 -9 -11
fage(-2 -4 -9)
fage e
fage[-2]
fage[-2 -3 -4]
fage[6]
fgender == f
fgender == "f"
fweight[fgender == "f"]
fnames
rm(s)
rm(q)
rm(n)
rm(potato)
rm(two.plus.two) rm(overwt)
rm(two.plus.two)
rm(overwt)
rm(fac)
rm(atoastypotato)
fmaily
family
rm(Joe)
rm(fname[Joe])
fname[e]
fnames[e]
fnames[5]
rm(fnames[3])
fnames[3]
rm(fnames[2])
rm(fnames[Joe])
fheight(j)
fheight[j]
fheight[Joe]
fheight[3]
fbmi[1 3 5 7 9 11 13]
fbmi[1]
fbmi[1 3]
fbmi[1, 3]
fbmi[-2 -3]
fbmi[fgender[f]]
fgender[f]
fbmi[fgender = f]
fbmi[3]
fbmi[fgender = "f"]
fbmi[ fgender == "f"]
fbmi[ 1 3 ]
fbmi[ 1]
fbmi[ 1 3]
fbmi
fbmi[ fweight > 150]
fbi[ fgender = "f" fage > 50]
lastname = character(length = 14)
lname
rm(lastname)
fname(1)
fname[1]
fnames[1]
fnames[1] = Tom Smith
date <- c(2014.25, 2014, 2013.75, 2013.5, 2013.25, 2013, 2012.75, 2012.5, 2012.25, 2012, 2011.75, 2011.5, 2011.25, 2011, 2010.75, 2010.5, 2010.25, 2010, 2009.75, 2009.5, 2009.25, 2009, 2008.75, 2008.5, 2008.25, 2008, 2007.75, 2007.5, 2007.25, 2007, 2006.75, 2006.5, 2006.25, 2006, 2005.75, 2005.5, 2005.25, 2005, 2004.75, 2004.5, 2003.25, 2003, 2002.75, 2002.5, 2002.25, 2002, 2001.75, 2001.5, 2001.25, 2001, 2000.75, 2000.5, 2000.25, 2000)
date
PTTRX <- c(2.21, 1.82, 2.87, 4.69, 2.86, -0.25, 6.49, 0.22, 0.65, 3.33, 3.43, 2.44, 2.08, 2.83, -0.18, 0.75, 2.70, -2.18, 3.25, 1.38, -0.30, 3.21, -0.49, 0.48, -0.53, -0.29, 3.88, 0.93, 1.70, -1.33, 4.59, 3.92, 3.32, -1.31, -2.07, 4.97, 1.49, 4.73, 6.04, 0.99, 2.97, 2.75, 3.82, -0.92, 1.11, 1.86, -1.06, 2.22, 2.88, 2.79, 3.15, 1.17, 0.60, -3.60, 1.17, -0.03, 1.30, 2.37)
plot(PTTRX, data)
PTTRX
data
plot(PTTRX, date)
date
PTTRX
PTTRX
date <- c(2014.25, 2014, 2013.75, 2013.5, 2013.25, 2013, 2012.75, 2012.5, 2012.25, 2012, 2011.75, 2011.5, 2011.25, 2011, 2010.75, 2010.5, 2010.25, 2010, 2009.75, 2009.5, 2009.25, 2009, 2008.75, 2008.5, 2008.25, 2008, 2007.75, 2007.5, 2007.25, 2007, 2006.75, 2006.5, 2006.25, 2006, 2005.75, 2005.5, 2005.25, 2005, 2004.75, 2004.5, 2004.25, 2004, 2003.75, 2003.5, 2003.25, 2003, 2002.75, 2002.5, 2002.25, 2002, 2001.75, 2001.5, 2001.25, 2001, 2000.75, 2000.5, 2000.25, 2000)
rev(date)
date <- rev(date)
plot(date, PTTRX)
plot(date, PTTRX, type = l)
plot(PTTRX, data, type = "l")
plot(PTTRX, date, type = "l")
plot(date, PTTRX, type = "l")
getquote(PTTRX)
getQuote("APPL")
getQuote(APPL)
require(quantmod)
download.packages(quantmod)
install.packages(quantmod)
install.packages('quantmod')
getSymbols("YHOO",src="google")
getSymbols("YHOO",src="google")
library('quantmod')
getSymbols("YHOO",src="google")
YHOO
YHOO$chr
YHOO$Data
Data
YHOO$dimnnames
getSymbols("YHOO",src="google")
getSymbols("PTTRX",src="google")
getSymbols("PTTRX",src="google")
getSymbols("MUTF:PTTRX",src="google")
getSymbols("APPL",src="google")
getSymbols("SPY",src="google")
SPY
getSymbols("VTSMX",src="google")
#install.packages('quantmod') #already on my machine
library('quantmod')
# This really is meant as a clean way to
# copy and paste line by line to R
# If you paste the whole thing, it sort of loses
# something...
require(quantmod)
getSymbols("YHOO",src="google") # from google finance
getSymbols("GOOG",src="yahoo") # from yahoo finance
getSymbols("DEXUSJP",src="FRED") # FX rates from FRED
getSymbols("XPT/USD",src="Oanda") # Platinum from Oanda Sort of handy, but it gets better... > # Specify lookup parameters, and save for future sessions.
setSymbolLookup(YHOO='google',GOOG='yahoo')
setSymbolLookup(DEXUSJP='FRED')
setSymbolLookup(XPTUSD=list(name="XPT/USD",src="oanda"))
saveSymbolLookup(file="mysymbols.rda")
# new sessions call loadSymbolLookup(file="mysymbols.rda")
getSymbols(c("YHOO","GOOG","DEXUSJP","XPTUSD"))
getSymbols("DEXUSJP",src="FRED") # FX rates from FRED
setSymbolLookup(YHOO='google',GOOG='yahoo')
setSymbolLookup(DEXUSJP='FRED')
setSymbolLookup(XPTUSD=list(name="XPT/USD",src="oanda"))
saveSymbolLookup(file="mysymbols.rda")
getSymbols(c("YHOO","GOOG","DEXUSJP","XPTUSD"))
getSymbols("AAPL",src="yahoo")
barChart(AAPL)
getSymbols("YHOO",src="yahoo")
AAPL-YHOO
View(YHOO)
View(YHOO)
View(AAPL)
APPL.HIGH
APPL$APPL.HIGH
AAPL.HIGH
AAPL.High
AAPL$AAPL.High
plot(AAPL$AAPL.High)
plot(AAPL$AAPL.High-YHOO$YHOO.High)
AAPL$AAPL.High-YHOO$YHOO.High
plot(YHOO)
plot(YHOO$YHOO.High)
YHOO$YHOO.High[2007-01-03]
YHOO$YHOO.High[YHOO$row.names = Y2007-01-03]
YHOO$YHOO.High[YHOO$row.names == Y2007-01-03]
YHOO$YHOO.High[YHOO$row.names == 2007-01-03]
YHOO$YHOO.High[YHOO$row.names == 2007-01-03]
YHOO$YHOO.High[YHOO$row.names == 2007-01-04]
HOO$YHOO.High[1]
YHOO$YHOO.High[1]
YHOO$YHOO.High[1950]
AAPL$AAPL.High[1950]/YHOO$YHOO.High[1950]
AAPL$AAPL.High[1950]
AAPL$AAPL.High[1950]/AAPL$AAPL.High[1]
AAPL$AAPL.High[1950]/AAPL$AAPL.High[2]
(AAPL$AAPL.High[1950])/(AAPL$AAPL.High[1])
str(00101)
str('00101')
00101
strsplit(00101)
strsplit('00101')
strsplit('00101', split = '')
c(strsplit('00101', split = ''))
ls = strsplit('00101', split = '')
apply(strsplit, 2, function(x) = str(x))
apply(strsplit, 2, function(x) str(x))
ls = c(00101)
a <- 0010101
as.numeric(strsplit(as.character(a), "")[[1]])
bin <- as.numeric(strsplit(as.character(a), "")[[1]])
bin[1]
yournumber <- 0010101010110101010110101010101010101010100000010101010101
yournumber <- 001010101011010101011010101010101010101
yournumber <- 10101010110101010110101010101010101
yournumber <- 101010101101010101101010101010101
bin <- as.numeric(strsplit(as.character(yournumber), "")[[1]])
power <- bin[2:9]
power <- bin[1:9]
power <- bin[2:9]
power <- bin[2:9]
power <- bin[2:10]
power
bin
yournumber <- 101010101101010101101010101010101
power <- bin[2:9]
signed <- bin[1]
power <- bin[2:9]
yournumber <- 101010101101010101101010101010101
bin <- as.numeric(strsplit(as.character(yournumber), "")[[1]])
yournumber <- 01010101101010101101010101010101
yournumber <- 101010101101010101101010101010101
yournumber <- 101010101101010101101010101010101
bin <- as.numeric(strsplit(as.character(yournumber), "")[[1]])
power <- bin[2:9]
options(scipen=999)
yournumber <- 101010101101010101101010101010101
options(scipen=100)
yournumber <- 101010101101010101101010101010101
options(scipen=30)
yournumber <- 101010101101010101101010101010101
options(scipen=1)
yournumber <- 101010101101010101101010101010101
options(scipen=999)
yournumber <- 101010101101010101101010101010101
power <- bin[2:9]
bin <- as.numeric(strsplit(as.character(yournumber), "")[[1]])
signed <- bin[1]
power <- bin[2:9]
multiplier <- bin[10:32]
est
source('~/.active-rstudio-document', echo=TRUE)
setwd("Documents/Classes\ -\ Fall\ 2014/")
setwd("Stat\ 133/git/stat133/hw4")
source('~/.active-rstudio-document', echo=TRUE)
data = ex1.test
max.outlier.rate
max.outlier.rate = .25
outlier.variables <- (apply(data, 2, function(x)
x <= (median(x) - 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25)))) |
x >= (median(x) + 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25))))))
outlier.variables
outlier.rate <- apply(outlier.variables, 1, function(x) (sum(x)/5))
outlier.rate
data$outlier.rate <- outlier.rate
data
subset.data.0 <- subset(data, data$outlier.rate <= max.outlier.rate)
dim(subset.data.0)
subset.data <- subset(subset.data.0, select = -c(outlier.rate))
dim(subset.data)
outlier.variables <- (apply(data, 2, function(x)
x <= (median(x) - 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25)))) |
x >= (median(x) + 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25))))))
outlier.rate <- apply(outlier.variables, 1, function(x) (sum(x)/5))
dim(data)
data <- ex1.test
outlier.variables <- (apply(data, 2, function(x)
x <= (median(x) - 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25)))) |
x >= (median(x) + 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25))))))
outlier.rate <- apply(outlier.variables, 1, function(x) (sum(x)/5))
outlier.rate
outlier.rate <= max.outlier.rate
subset.data <- data[outlier.rate <= max.outlier.rate, ]
dim(subset.data)
rm(subset.data)
subset.data <- data[outlier.rate <= max.outlier.rate]
removeOutliers <- function(data, max.outlier.rate) {
stopifnot(max.outlier.rate>=0 & max.outlier.rate<=1)
# your code here
outlier.variables <- (apply(data, 2, function(x)
x <= (median(x) - 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25)))) |
x >= (median(x) + 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25))))))
outlier.rate <- apply(outlier.variables, 1, function(x) (sum(x)/5))
subset.data <- data[outlier.rate <= max.outlier.rate, ]
return(subset.data)
}
tryCatch(checkEquals(remove.outlier.t, removeOutliers(ex1.test, 0.25), ),
error=function(err) errMsg(err))
utlier.variables <- (apply(data, 2, function(x)
x <= (median(x) - 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25)))) |
x >= (median(x) + 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25))))))
outlier.variable
outlier.variables
outlier.rate <- apply(outlier.variables, 1, function(x) (sum(x)/5))
removeOutliers <- function(data, max.outlier.rate) {
stopifnot(max.outlier.rate>=0 & max.outlier.rate<=1)
# your code here
outlier.variables <- (apply(data, 2, function(x)
x <= (median(x) - 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25)))) |
x >= (median(x) + 1.5*(as.vector(quantile(x, 0.75)) - as.vector(quantile(x, 0.25))))))
outlier.rate <- apply(outlier.variables, 1, function(x) (sum(x)/(ncol(data))))
subset.data <- data[outlier.rate <= max.outlier.rate, ]
return(subset.data)
}
tryCatch(checkEquals(remove.outlier.t, removeOutliers(ex1.test, 0.25), ),
error=function(err) errMsg(err))
setwd("..")
setwd("hw3")
source('~/Documents/Classes - Fall 2014/Stat 133/git/stat133/hw3/hw3.r', echo=TRUE)
brewer.pal(10, "YlOrRd")
