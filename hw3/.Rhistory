# SO2012Ctry <- your code here
SO2012Ctry$GDP_per_person <- GDP_per_person
# symbols( your code here )
symbols(log(SO2012Ctry$pop), log(SO2012Ctry$GDP_per_person), circles = sqrt(SO2012Ctry$Total)/40, inches = FALSE)
# Q8. It appears that the countries with no medals are circles too.
# Remake the plot, this time using *only the countries that won medals*.
# If necessary adjust the size of the circles.
# Then add the non-medal countries to the plot using the "."
# plotting character.
# your plotting code here
wonmedal = subset(SO2012Ctry, Total > 0)
nomedal = subset(SO2012Ctry, Total == 0)
symbols(log(wonmedal$pop), log(wonmedal$GDP_per_person), circles = sqrt(wonmedal$Total)/40, inches = FALSE)
points(log(nomedal$pop), log(nomedal$GDP_per_person), pch = ".")
# Q9. Make the plot information rich by adding axis labels,
# title, and label 5 of the more interesting points
# with the country name. Use text() to do this.
# top5 <- order( your code here )
top5 <- SO2012Ctry$Country[tail(order(SO2012Ctry$Total), decreasing, n=5)]
# your plotting code here, including a new call to text()
symbols(log(wonmedal$pop), log(wonmedal$GDP_per_person), circles = sqrt(wonmedal$Total)/40, inches = FALSE, main = "Olympic Medals won by Population and GDP per person", xlab = "Population (logarithmic)", ylab = "GDP per person (logarithmic)")
points(log(nomedal$pop), log(nomedal$GDP_per_person), pch = ".")
text((log(SO2012Ctry$pop)[SO2012Ctry$Country %in% top5]), (log(SO2012Ctry$GDP_per_person)[SO2012Ctry$Country %in% top5]), labels = top5, cex = 0.5, col = "red")
######################################
# PLOT 3.
# Plotting points on maps can help us see geographic relationships
#
#Q10. Install the maps library and load it into your R session.
# Make a map of the world, using the function map(),
# where the countries are filled with a light grey color.
## you only need to run these two lines once:
#install.packages("maps")
library("maps")
# world <- map( your code here )
world <- map(fill = TRUE, col = "gray")
#Q11. Use the symbols() function to add circles to the map where
# the circles are proportional in area to the number of medals
# won by the country. You may find the add parameter useful.
# (Be sure to NOT plot circles for countries with 0 medals).
# adjust the size of the circles if necessary
# Check what variables you have in the dataframe using names().
names(SO2012Ctry)
# pull out the contries that won at least one medal (you will need at least
# the contries longitude, latitude and Total.)
# wonMedal <- your code here
wonMedal <- wonmedal
# world <- your code here
world <- map(fill = TRUE, col = "gray")
# symbols( your code here )
symbols(wonMedal$longitude, wonMedal$latitude, circles = sqrt(wonmedal$Total)/4, inches = FALSE, add = T)
#Q12. Remake the plot and fill in the circles with a partially
# transparent gold color. To create this color:
# install the RColorBrewer library and load it into R;
# call display.brewer.all() to examine the palettes;
# choose a palette and ask for the names of a few colors
# using brewer.pal();
# pick one of the colors and create a new one that is transparent
# by adding two more digits to the end of the name, e.g.,
# if you want to use "#FEB24C" then make it transparent with
# e.g. myColor = "#FEB24CAA" or   "#FEB24C88"
# You only need to call these two lines once:
#install.packages("RColorBrewer")
library("RColorBrewer")
# display.brewer.all( your code here )
display.brewer.all()
# brewer.pal( your code here )
brewer.pal(10, "YlOrRd")
# myGold <- your selected color
myGold <- #FEB24CAA
#world <- your code here
world <- map(fill = TRUE, col = "gray")
#symbols( your code here )
symbols(wonMedal$longitude, wonMedal$latitude, circles = sqrt(wonmedal$Total)/3, inches = FALSE, add = T, fg = par("col"), bg = "#FEB24CAA")
## That was the FINAL version of this plot
# HW 3
# Graphics Skills
# Due Friday Sept 26 by midnight
# This .R file should contain your code and answers to questions
# The goals of this assignment are to:
# 1. Become familiar with the variety of plotting functions available in R,
# 2. Learn which types of plots are appropriate for which types of data
# 3. Gain practice in making plots that make the data stand out,
#    facilitate comparison, and are information rich
# 4. Gain additional experience working with data frames and vectors
# The data are related to the 2012 Summer Olympics
# We have three data sets available to you:
# a. wr1500m - a data frame containing information about the
# world record in the 1500 meter men's race
# b. SO2012Ctry which is a data frame with information about
# each country that had an athlete participate in the olympics
# c. London2012ALL_ATHLETES.rda - a data frame which contains data
# on individual atheletes who participated in the 2012 Olympics
# We will be making 4 plots with these sources of data.
# You will make each plot by gradually adding more features to it.
# The help for plot.default describes many parameters that are
# available for many of the plotting functions.
# Also, ?par provides help on many other plotting parameters.
# Some of these can be set in the plot function, while others
# are set in a call to par()
##############################
# PLOT 1. World Record in Men's 1500 meter run
# When watching the summer Olympics, we might be curious
# about how much faster today's runners are compared to
# runners 50 or 100 years ago.
# A search on Wikipedia shows us tables of the times for the
# world record holder in 1500 meters dating back to 1892.
# We can use readHTMLTable() (from the package "XML" in R and
# this function goes off to the Web and downloads the tables we
# need and reads them into R as data frames. After some text
# manipulation, we have a data frame that we can use to examine
# the world records graphically.
# Later in this semester, you will be able to do the same sort
# of thing (access data from the Web from within R and clean it
# for analysis.).  Right now, the data are available to you in
# the hw3 directory in the file WR1500MeterMen.rda.
# load the data
load("WR1500MeterMen.rda")
# The name of the object loaded is wr1500m
# The time (in the column "times") in these data are recorded in seconds,
# and they are seconds over 3 minutes.
# So a time of 70 is really 4 minutes and 10 seconds.
# Q1a. How many world records does this data frame contain?
# n.wr <- your code here
n.wr <- length(unique(wr1500m$times))
# Q1b. Use R commands to find out who currently holds the world
# record in the men's 1500 meter.
# wr.name <- your code here
wr.name <- wr1500m$athlete[wr1500m$times == min(wr1500m$times)]
# Let's look at the relationship between date and time.
# Q1c. What type of variable (numeric (continuous or discrete), nominal ordinal)
# are year and times? (no need to save the output, just look at it)
class(wr1500m$year)
class(wr1500m$times)
# When we are examining a variable to see how it changes in time,
# we typically make a line plot, with time on the x-axes and
# the (x,y) values connected with line segments.
# Q2a. Begin by making a step plot of year by times for these data.
# (hint: use the type argument in plot)
# Don't bother to make the plot pretty yet; we will get to that later.
# But do add 180 to the times so that they are accurate measurements in seconds,
# store that in a new variable and add to the data frame.
# times_sec <- your code here
times_sec <- wr1500m$times + 180
# wr1500m <- your code here
wr1500m$times_sec <- times_sec
# plot( your code here )
plot(wr1500m$year, wr1500m$times_sec, type = "s")
# Q2b. Redo the plot using a date that incorporates the month as
# well as the year. For example, in Sep 1904 the world record
# was broken by James Lightbody. Use a date of 1904.75 for this
# date. If any month is NA, use 0.5 for the fraction.
# Create a new variable, new_year, with the date in this format but
# first find and set all missing months to 0.5
# Add new_year to the dataframe.
# your code here
# new_year <- your code here
wr1500m$month[is.na(wr1500m$month)] <- 6
new_year <- wr1500m$year + (wr1500m$month/12)
# wr1500m <- your code here
wr1500m$new_year <- new_year
# plot( your code here )
plot(wr1500m$new_year, wr1500m$times_sec, type = "s")
# Q3. The current world record was set in 1998. If we want to
# show that this record still stands in 2014, we could add a
# horizontal line segment to the plot from 1998 to 2014 at the
# 1998 record time.
# To do this: remake the plot and set the xlim parameter
# so that 2014 is included in the x-axis scale;
# then use the lines() function to add the additional segment.
# wr_1998 <- your code here
wr_1998 = wr1500m$new_year[wr1500m$year == 1998]
# plot( your code here )
plot(wr1500m$new_year, wr1500m$times_sec, xlim = c(1890, 2020), type = "s")
# lines( your code here )
lines(x=c(wr_1998,2014.75),y=c(206,206))
# Q4. There are two times where the record stood for several
# years - in 1944 and 1998. Let's make it easier to see these
# dates and let's include the name of the athlete who set
# the record.  This additional reference information makes
# our plot richer.
# Add two grey vertical lines. One at 1944 and the other at 1998.
# Add the runner's name next to each vertical line.
# To do this, you will need the abline() function, the text() function,
# and you might want to consider the cex, col, pos, adj parameters.
# Also, do not type in the athlete's name. Instead, use subsetting
# of wr1500m$athlete to access it.
# wr_1944 <- your code here
wr_1944 <- wr1500m$new_year[wr1500m$year == 1944]
# abline( your code here )
abline(v = wr_1944, col = "grey")
# abline( your code here )
abline(v = wr_1998, col = "grey")
# text( your code here )
text(wr_1944, y=wr1500m$times_sec[wr1500m$year == 1944]+30, adj = 0, cex=0.8, labels = wr1500m$athlete[wr1500m$year == 1944])
# text( your code here )
text(wr_1998, y=wr1500m$times_sec[wr1500m$year == 1998]+30, adj = 1, cex=0.8, labels = wr1500m$athlete[wr1500m$year == 1998])
# Q5. Now we are ready to add other contextual information.
# Remake the plot as before but now adding axis labels and a title.
# This is the FINAL version of the plot of world record times.
# put your final version of the plotting commands below.
plot(wr1500m$new_year, wr1500m$times_sec, main="Men's 1500 Meter World Records", xlab="Year", ylab="Time (s)", xlim=c(1890, 2020), type = "s")
abline(v = wr_1944, col = "grey")
abline(v = wr_1998, col = "grey")
lines(x=c(wr_1998,2014.75),y=c(206,206))
text(wr_1944, y=wr1500m$times_sec[wr1500m$year == 1944]+30, adj = 0, cex=0.8, labels = wr1500m$athlete[wr1500m$year == 1944])
text(wr_1998, y=wr1500m$times_sec[wr1500m$year == 1998]+30, adj = 1, cex=0.8, labels = wr1500m$athlete[wr1500m$year == 1998])
## You have finised the first plot!!
################################
# PLOT 2
# A lot of medal counting goes on during the Olympics.
# We might wonder about the relationship between number of medals
# a country has and the size of its population and its wealth.
# We collected data from various sources (ManyEyes, Guardian,
# ISO) to create this data frame with GDP, population, and other information
# about each country that participated in the Olympics.
# The data frame SO2012Ctry contains this information.
# It can be loaded into R with
# load( your code here )
load("SummerOlympics2012Ctry.rda")
#Q6 Take a look at the variables in this data frame.
# What kind of variable is GDP and population?
### GDP : continuous
### population : discrete
# What about Total?
### Total : discrete
# To examine the relationship between these three variables,
# we could consider making a scatter plot of GDP against population
# and use plotting symbols that are proportional in size to
# the number of medals.
# To begin, make a plot of GDP against population.
# Consider which of the three principles of good graphics this
# plot violates and why.
# plot( your code here )
plot(SO2012Ctry$pop, SO2012Ctry$GDP)
### Data stand out, Values are plotted on the top of each other
### Facilitate comparison OR poor scale, We should zoom in on the bulk of the data
### Should fill data region, lots of empty space
### Information rich, for example identify outliers
#Q7. Let's examine GDP per person (create this new variable yourself)
# and population. Use a log scale for both axes. Use the symbols()
# function rather than plot(), and create circles for the plotting
# symbols() where the area of the circle is proportional to the
# total number of medals.
# GDP_per_person <- your code here
GDP_per_person <- SO2012Ctry$GDP/SO2012Ctry$pop
# SO2012Ctry <- your code here
SO2012Ctry$GDP_per_person <- GDP_per_person
# symbols( your code here )
symbols(log(SO2012Ctry$pop), log(SO2012Ctry$GDP_per_person), circles = sqrt(SO2012Ctry$Total)/40, inches = FALSE)
# Q8. It appears that the countries with no medals are circles too.
# Remake the plot, this time using *only the countries that won medals*.
# If necessary adjust the size of the circles.
# Then add the non-medal countries to the plot using the "."
# plotting character.
# your plotting code here
wonmedal = subset(SO2012Ctry, Total > 0)
nomedal = subset(SO2012Ctry, Total == 0)
symbols(log(wonmedal$pop), log(wonmedal$GDP_per_person), circles = sqrt(wonmedal$Total)/40, inches = FALSE)
points(log(nomedal$pop), log(nomedal$GDP_per_person), pch = ".")
# Q9. Make the plot information rich by adding axis labels,
# title, and label 5 of the more interesting points
# with the country name. Use text() to do this.
# top5 <- order( your code here )
top5 <- SO2012Ctry$Country[tail(order(SO2012Ctry$Total), decreasing, n=5)]
# your plotting code here, including a new call to text()
symbols(log(wonmedal$pop), log(wonmedal$GDP_per_person), circles = sqrt(wonmedal$Total)/40, inches = FALSE, main = "Olympic Medals won by Population and GDP per person", xlab = "Population (logarithmic)", ylab = "GDP per person (logarithmic)")
points(log(nomedal$pop), log(nomedal$GDP_per_person), pch = ".")
text((log(SO2012Ctry$pop)[SO2012Ctry$Country %in% top5]), (log(SO2012Ctry$GDP_per_person)[SO2012Ctry$Country %in% top5]), labels = top5, cex = 0.5, col = "red")
######################################
# PLOT 3.
# Plotting points on maps can help us see geographic relationships
#
#Q10. Install the maps library and load it into your R session.
# Make a map of the world, using the function map(),
# where the countries are filled with a light grey color.
## you only need to run these two lines once:
#install.packages("maps")
library("maps")
# world <- map( your code here )
world <- map(fill = TRUE, col = "gray")
#Q11. Use the symbols() function to add circles to the map where
# the circles are proportional in area to the number of medals
# won by the country. You may find the add parameter useful.
# (Be sure to NOT plot circles for countries with 0 medals).
# adjust the size of the circles if necessary
# Check what variables you have in the dataframe using names().
names(SO2012Ctry)
# pull out the contries that won at least one medal (you will need at least
# the contries longitude, latitude and Total.)
# wonMedal <- your code here
wonMedal <- wonmedal
# world <- your code here
world <- map(fill = TRUE, col = "gray")
# symbols( your code here )
symbols(wonMedal$longitude, wonMedal$latitude, circles = sqrt(wonmedal$Total)/4, inches = FALSE, add = T)
#Q12. Remake the plot and fill in the circles with a partially
# transparent gold color. To create this color:
# install the RColorBrewer library and load it into R;
# call display.brewer.all() to examine the palettes;
# choose a palette and ask for the names of a few colors
# using brewer.pal();
# pick one of the colors and create a new one that is transparent
# by adding two more digits to the end of the name, e.g.,
# if you want to use "#FEB24C" then make it transparent with
# e.g. myColor = "#FEB24CAA" or   "#FEB24C88"
# You only need to call these two lines once:
#install.packages("RColorBrewer")
library("RColorBrewer")
# display.brewer.all( your code here )
display.brewer.all()
# brewer.pal( your code here )
brewer.pal(10, "YlOrRd")
# myGold <- your selected color
myGold <- #FEB24CAA
#world <- your code here
world <- map(fill = TRUE, col = "gray")
#symbols( your code here )
symbols(wonMedal$longitude, wonMedal$latitude, circles = sqrt(wonmedal$Total)/3, inches = FALSE, add = T, fg = par("col"), bg = "#FEB24CAA")
## That was the FINAL version of this plot
symbols(log(wonmedal$pop), log(wonmedal$GDP_per_person), circles = sqrt(wonmedal$Total)/40, inches = FALSE, main = "National Olympic Medals by Population and GDP per person", xlab = "Population (logarithmic)", ylab = "GDP per person (logarithmic)")
points(log(nomedal$pop), log(nomedal$GDP_per_person), pch = ".")
text((log(SO2012Ctry$pop)[SO2012Ctry$Country %in% top5]), (log(SO2012Ctry$GDP_per_person)[SO2012Ctry$Country %in% top5]), labels = top5, cex = 0.5, col = "red")
library(TeachingDemos)
install.packages(TeachingDemos)
install.packages(teachingdemos)
top5 <- SO2012Ctry$Country[tail(order(SO2012Ctry$Total), decreasing, n=5)]
# your plotting code here, including a new call to text()
symbols(log(wonmedal$pop), log(wonmedal$GDP_per_person), circles = sqrt(wonmedal$Total)/40, inches = FALSE, main = "National Olympic Medals by Population and GDP per person", xlab = "Population (logarithmic)", ylab = "GDP per person (logarithmic)")
points(log(nomedal$pop), log(nomedal$GDP_per_person), pch = ".")
text((log(SO2012Ctry$pop)[SO2012Ctry$Country %in% top5]), (log(SO2012Ctry$GDP_per_person)[SO2012Ctry$Country %in% top5]), labels = top5, cex = 0.5, col = "red")
load("London2012ALL_ATHLETES.rda")
type(Sex)
var(Sex)
symbols(log(wonmedal$pop), log(wonmedal$GDP_per_person), circles = sqrt(wonmedal$Total)/40, inches = FALSE, main = "National Olympic Medals by Population and GDP per person", xlab = "Population (logarithmic)", ylab = "GDP per person (logarithmic)")
var(Sex)
text((log(SO2012Ctry$pop)[SO2012Ctry$Country %in% top5]), (log(SO2012Ctry$GDP_per_person)[SO2012Ctry$Country %in% top5]), labels = top5, cex = 0.5, col = "red")
var(Sex)
symbols(log(SO2012Ctry$pop), log(SO2012Ctry$GDP_per_person), circles = sqrt(SO2012Ctry$Total)/40, inches = FALSE)
plot(wr1500m$new_year, wr1500m$times_sec, main="Men's 1500 Meter World Records", xlab="Year", ylab="Time (s)", xlim=c(1890, 2020), type = "s")
names(Sex)
names(atheletes#Sex)
names(athletes$Sex)
class(athletes$Sex)
class(athletes$MoreThat1Sport)
class(athletes$MoreThan1Sport)
class(Athletes$Name)
class(athletes$Name)
str(athletes$Name)
type(athletes$Name)
sum(athletes$Name)
table(athletes$Name)
length(athletes$Names)
length(athletes)
nlevels(athletes)
nlevels(athletes$Names)
nlevels(athletes$Name)
nlevels(athletes$MoreThan1Sport)
sum(athletes$MoreThan1Sport)
length(athletes$MoreThan1Sport)
length(athletes$MoreThan1Sport[athletes$MoreThan1Sport == 1])
length(athletes$MoreThan1Sport[athletes$MoreThan1Sport == "Y"])
length(athletes[athletes$Sex = "F"])
length(athletes[athletes$Sex == "F"])
length(athletes$Sex[athletes$Sex == "F"])
nfactors(athletes$Name[athletes$Sex == "F"])
nlevels(athletes$Name[athletes$Sex == "F"])
nlevels(athletes$Sport)
sum(athletes$Sport)
table(Athletes$Sport)
table(athletes$Sport)
table(Athletes$Sex)
table(athletes$Sex)
nlevels(unique(athletes$Name))
which(duplicated(athletes$Names))
sum(athletes$Name)
duplicated(athletes$Name)
athletes$Name[duplicated(athletes$Name) == "TRUE"]
athletes$Name[duplicated(athletes$Name) == "TRUE", athletes$Sex == "F"]
athletes$Name[athletes$Sex == "F"]
athletes$names[duplicated(athletes$Name) == "TRUE"]
athletes$Name[duplicated(athletes$Name) == "TRUE"]
athletes$Name[duplicated(athletes$Name) == "TRUE"][athletes$Sex == "F"]
nlevels(athletes$Name[duplicated(athletes$Name) == "TRUE"][athletes$Sex == "F"])
sum(athletes$Sex == "F")
unique(athletes$Name)
sum(athletes$Sex == "F" & unique(athletes$Name))
sum(athletes$Sex == "F", unique(athletes$Name))
sum(athletes$Sex == "F", unique(athletes$Name) = TRUE)
sum(athletes$Sex == "F", unique(athletes$Name) == TRUE)
sum(sum(athletes$Sex == "M", unique(athletes$Name) = TRUE))
sum(sum(athletes$Sex == "M", unique(athletes$Name) == TRUE))
sum(1+1)
sum(sum(1+1))
duplicated(athletes$Name)
table(duplicated(athletes$Name))
duplicated(athletes$Name) == TRUE
sum(duplicated(athletes$Name)) == TRUE)
sum(duplicated(athletes$Name) == TRUE)
sum(duplicated(athletes$Name)) == FALSE)
sum(duplicated(athletes$Name) == FALSE)
sum(duplicated(athletes$Name) == FALSE, athletes$Sex == "F")
um(duplicated(athletes$Name) == FALSE & athletes$Sex == "F")
sum(duplicated(athletes$Name) == FALSE & athletes$Sex == "F")
sum((duplicated(athletes$Name) == FALSE & athletes$Sex == "M")
sum(duplicated(athletes$Name) == FALSE & athletes$Sex == "M")
n.athletes <- sum(duplicated(athletes$Name) == FALSE)
n.women <- sum(duplicated(athletes$Name) == FALSE & athletes$Sex == "F")
frac.women <- (n.women/n.athletes)
levels(athletes$Sport)
nlevels(athletes$Sport)
n.sports <- nlevels(athletes$Sport)
table(athletes$Sport)
table(athletes$Sport, athletes$Sex)
table(athletes$Sex, athletes$Sport)
barplot(table(athletes$Sport, athletes$Sex))
barplot(table(athletes$Sex, athletes$Sport))
barplot(table(athletes$Sex, athletes$Sport, beside=TRUE))
barplot(table(athletes$Sex, athletes$Sport), beside=TRUE))
barplot(table(athletes$Sex, athletes$Sport), beside=TRUE)
barplot(table(athletes$Sport, athletes$Sex), beside = TRUE)
barplot(table(athletes$Sport, athletes$Sex), beside = TRUE)
barplot(table(athletes$Sport, athletes$Sex), beside = TRUE)
barplot(table(athletes$Sex, athletes$Sport), beside=TRUE)
barplot(table(athletes$Sex, athletes$Sport), beside=TRUE)
barplot(table(athletes$Sex, athletes$Sport), beside=FALSE)
barplot(table(athletes$Sex, athletes$Sport), beside=TRUE)
set.beside <- T
sum(athletes$Name)
sum(athletes$Name == TRUE)
sum(athletes$Name == FALSE)
sum(athletes$name)
count(athletes$name)
nrow(athletes$Name)
ncolumn(athletes$Name)
ncol(athletes$Name)
NROW(athletes$Name)
sum(duplicated(athletes$Name) == FALSE)
NROW(athletes$Name[athletes$Sex == "F"])
n.athletes <- NROW(athletes$Name)
n.women <- NROW(athletes$Name[athletes$Sex == "F"])
frac.women <- (n.women/n.athletes)
NROW(athletes$Name)
NROW(athletes$Sport)
sum(duplicated(athletes$Name) == FALSE & athletes$Sex == "F")
table(athletes$Sex, athletes$Sport)
table(athletes$Sport, athletes$Sex)
barplot(table(athletes$Sex, athletes$Sport), beside=TRUE)
barplot(athTab2, beside=TRUE)
athTab2 <- table(athletes$Sport, athletes$Sex)
barplot(athTab2, beside=TRUE)
best.plot <- 1
athTab <- table(athletes$Sex, athletes$Sport)
barplot(athTab, beside=FALSE)
barplot(athTab, beside=TRUE)
barplot(athTab2, beside=TRUE)
athTab <- table(athletes$Sex, athletes$Sport)
barplot(athTab, beside=TRUE)
athTab2 <- table(athletes$Sport, athletes$Sex)
athTab2
barplot(athTab2, beside=TRUE)
athTab <- table(athletes$Sex, athletes$Sport)
athTab <- table(athletes$Sex, athletes$Sport)
barplot(athTab, beside=FALSE)
barplot(athTab, beside=TRUE)
order(Sport)
order(athTab)
order(athTab, decreasing = TRUE)
tail(order(athTab), decreasing)
tail(order(athTab), decreasing), n=5
order(athTab)
athTab
order(athTab[athlete$Sex == "F"])
order(athTab[athletes$Sex == "F"])
order(athTab)
athTab
order(athletes$Sport)
order(table(athletes$Sport))
table(athletes$Sport)
order(table(athletes$Sport), decreasing)
order(table(athletes$Sport), decreasing = TRUE)
order(table(athletes$Sport), decreasing = TRUE)
table(athletes$Sport)[order(table(athletes$Sport), decreasing = TRUE)]
table(athletes$Sport, athletes$Sex)[order(table(athletes$Sport), decreasing = TRUE)]
table(athletes$Sport)[order(table(athletes$Sport), decreasing = TRUE)]
order(table(athletes$Sport), decreasing = TRUE)
orderSport <- order(table(athletes$Sport), decreasing = TRUE)
table(athletes$Sex, athletes$Sport)
table(athletes$Sex, athletes$Sport)[orderSport]
athTab[[orderSport]]
athTab[orderSport]
barplot(athTab[orderSport])
athTab[, orderSport]
barplot(athTab[, orderSport])
barplot(athTab[, orderSport], beside = TRUE)
orderSport <- order(table(athletes$Sport), decreasing = TRUE)
barplot(athTab[, orderSport], beside = TRUE)
barplot(athTab[, orderSport], beside = TRUE, cex = 0.5, crt = 90)
barplot(athTab[, orderSport], beside = TRUE, crt = 90)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athetes by Sex and Sport")
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport")
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex.lab = 0.5)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex.lab = 0.1)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex = 0.1)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex.lab = 0.1)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, csi = 0.1)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex.axis = 0.1)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex.axis = 0.1)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex.names = 0.1)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex.names = 0.5)
barplot(athTab[, orderSport], beside = TRUE, main = "2012 Olympics Athletes by Sex and Sport", las = 3, cex.names = 0.5)
source('~/Documents/Classes - Fall 2014/Stat 133/git/stat133/hw3/hw3.r', echo=TRUE)
