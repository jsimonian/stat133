s = s - 4/n
n = n + 2
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
if((n - 1000) < 1) {
if(((n-1)/2) %% 2 == 0) {
s = s + 4/n
n = n + 2 }
if(((n-1)/2) %% 2 == 1) {
s = s - 4/n
n = n + 2 }}
fage
fage -2 -4 -9 -11
fage(-2 -4 -9)
fage e
fage[-2]
fage[-2 -3 -4]
fage[6]
fgender == f
fgender == "f"
fweight[fgender == "f"]
fnames
rm(s)
rm(q)
rm(n)
rm(potato)
rm(two.plus.two) rm(overwt)
rm(two.plus.two)
rm(overwt)
rm(fac)
rm(atoastypotato)
fmaily
family
rm(Joe)
rm(fname[Joe])
fname[e]
fnames[e]
fnames[5]
rm(fnames[3])
fnames[3]
rm(fnames[2])
rm(fnames[Joe])
fheight(j)
fheight[j]
fheight[Joe]
fheight[3]
fbmi[1 3 5 7 9 11 13]
fbmi[1]
fbmi[1 3]
fbmi[1, 3]
fbmi[-2 -3]
fbmi[fgender[f]]
fgender[f]
fbmi[fgender = f]
fbmi[3]
fbmi[fgender = "f"]
fbmi[ fgender == "f"]
fbmi[ 1 3 ]
fbmi[ 1]
fbmi[ 1 3]
fbmi
fbmi[ fweight > 150]
fbi[ fgender = "f" fage > 50]
lastname = character(length = 14)
lname
rm(lastname)
fname(1)
fname[1]
fnames[1]
fnames[1] = Tom Smith
source('~/Documents/Classes - Fall 2014/Stat 133/git/stat133/hw2/hw2.r', echo=TRUE)
setwd("~/Documents/Classes\ -\ Fall\ 2014/Stat\ 133/git/stat133/hw2")
source('~/Documents/Classes - Fall 2014/Stat 133/git/stat133/hw2/hw2.r', echo=TRUE)
plot(family$weight)
plot(family$weight OW_weight)
plot(family$weight, OW_weight)
plot(OW_weight, family$weight)
abline(a=0, b=1)
OW_NHANES
source('~/Documents/Classes - Fall 2014/Stat 133/git/stat133/hw2/hw2.r', echo=TRUE)
load(SFHousing.rda)
load("SFHousing.rda")
objects()
class()
class(objects)
class(cities, family)
class(cities)
class(family)
class(housing)
dim(cities)
dim(housing)
names(cities)
names(housign)
names(housing)
summary(cities)
summary(housing)
n.cities
number(cities)
cities
households
housing
phew
okay then
dim(cities)
sum(cities)
count(cities)
nrow(cities)
n.housesale = nrow(housing)
n.cities = nrow(cities)
sum(housing$city =="Berkeley")
sum(housing)
nrow(housing)
sum(cities)
nrow(housing$city=="berkeley")
nrow(housing$city=="Berkeley")
sum(housing$city=="Berkeley")
names(housing)
sum(names(housing))
as.numeric(names(housing))
length(names(housing))
length(cities)
length(housing)
ncol(housing)
names(housing)
all.housing.variable = c(names(housing))
local.cities = c(Berkeley, Albany, Piedmont, Emeryville)
local cities = c(housing$city == "Berkeley")
local.cities = housing$city == "Berkeley"
rm(local.cities)
local.cities = subset(housing, housing$city == "Berkeley")
rm(local.cities)
local.cities = subset(housing, housing$city == "Berkeley" | housing$city == "Piedmont" | housing$city == "Emeryville" | housing$city == "Albany")
rm(local.cities)
local.cities = subset(housing, housing$city == "Berkeley" | housing$city == "Piedmont" | housing$city == "Emeryville" | housing$city == "Albany", select = c(city, zip, price, br, bsqft, year))
rm(local.cities)
local.cities = subset(housing, housing$city == "Berkeley" | "Piedmont" | "Emeryville" | "Albany", select = c(city, zip, price, br, bsqft, year))
local.cities = subset(housing, housing$city == "Berkeley" | housing$city == "Piedmont" | housing$city == "Emeryville" | housing$city == "Albany", select = c(city, zip, price, br, bsqft, year))
rm(localcities)
rm(local.cities)
localcities = c("Berkeley", "Piedmont", "Emeryville", "Albany")
some.housing.variables = c("city", "zip", "price", "br", "bsqft", "year")
BerkArea = subset(housing, housing$city == localcities)
BerkArea = subset(housing, select = localcities)
BerkArea = subset(housing$city = localcities)
BerkArea = subset(housing, local.cities, some.housing.variables)
BerkArea = subset(housing, localcities, some.housing.variables)
BerkArea = subset(housing, housing$city %in% localcities, some.housing.variables)
load("SFHousing.rda")
local.cities = c("Berkeley", "Piedmont", "Emeryville", "Albany")
some.housing.variables = c("city", "zip", "price", "br", "bsqft", "year")
BerkArea = subset(housing, housing$city %in% local.cities, some.housing.variables)
quantile(BerkArea$price probs(99))
> quantile(BerkArea$price probs = seq(99))
quantile(BerkArea$price probs = seq(99))
quantile(BerkArea$price, probs = seq(99))
quantile(BerkArea$price, probs = seq(0.99))
quantile(BerkArea$price, probs = seq(90, 95, 99))
quantile(BerkArea$price, probs = seq(0.9, 0.95, .99))
quantile(BerkArea$price, probs = seq(0.99))
quantile(BerkArea$price, probs = 0.9)
quantile(BerkArea$price, probs = 0.99)
quantile(BerkArea$bsqft, probs = 0.99)
quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)
500>2
5000>quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)
5000 - quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)
quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)^2
BerkArea.new = subset(BerkArea, BerkArea$bsqft < quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE) & BerkArea$price < quantile(BerkArea$price, probs = 0.99))
BerkArea.new
BerkArea.new = subset(BerkArea, BerkArea$price <= quantile(BerkArea$price, probs = 0.99) & BerkArea&bsqft <= quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price <= quantile(BerkArea$price, probs = 0.99))
BerkArea.new = subset(BerkArea, BerkArea&bsqft <= quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)
BerkArea.new = subset(BerkArea, BerkArea&bsqft <= quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price <= quantile(BerkArea$price, probs = 0.99) & BerkArea$bsqft <= quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price = quantile(BerkArea$price, probs = 0.99) & BerkArea&bsqft = quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price == quantile(BerkArea$price, probs = 0.99) & BerkArea&bsqft == quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price <= quantile(BerkArea$price, probs = 0.99) & BerkArea$bsqft <= quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price == quantile(BerkArea$price, probs = 0.99) & BerkArea$bsqft == quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price <= quantile(BerkArea$price, probs = 0.99) & BerkArea$bsqft <= quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price < quantile(BerkArea$price, probs = 0.99) & BerkArea$bsqft < quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
BerkArea.new = subset(BerkArea, BerkArea$price <= quantile(BerkArea$price, probs = 0.99) & BerkArea$bsqft <= quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE))
price99 = uantile(BerkArea$price, probs = 0.99)
pr99 = quantile(BerkArea$price, probs = 0.99)
pr99
sqft99 = quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)
sqft99
BerkArea.new = subset(BerkArea, BerkArea$price <= pr99, BerkArea$bsqft <= sqft99)
BerkArea.new = subset(BerkArea, BerkArea$price <= pr99 & BerkArea$bsqft <= sqft99)
BerkArea.new = subset(BerkArea, BerkArea$price <= pr99, BerkArea$bsqft <= sqft99, na.rm = FALSE)
BerkArea.new = subset(BerkArea, BerkArea$price <= pr99, BerkArea$bsqft <= sqft99)
BerkArea.new
quantile(BerkArea$bsqft, probs = 0.99)
quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)
quantile(BerkArea$price, probs = 0.99, na.rm = TRUE)
BerkArea.new = subset(BerkArea, BerkArea$price !> pr99 & BerkArea$bsqft !> sqft99)
BerkArea.new = subset(BerkArea, -(BerkArea$price > pr99 | BerkArea$bsqft !> sqft99))
BerkArea.new = subset(BerkArea, BerkArea$price > pr99 & BerkArea$bsqft > sqft99)
BerkArea.new = subset(BerkArea, BerkArea$price !> pr99 | BerkArea$bsqft !> sqft99)
BerkArea.new = subset(BerkArea, BerkArea$price > pr99 | BerkArea$bsqft > sqft99)
pr99 = quantile(BerkArea$price, probs = 0.99)
sqft99 = quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)
BerkArea.3 = BerkArea - BerkArea.new
BerkArea.3 = subset(BerkArea, !BerkArea.new)
BerkArea.3 = subset(BerkArea, -BerkArea.new)
View(BerkArea.3)
rm(BerkArea.3)
rm(BerkArea.new)
BerkArea.new = subset(BerkArea, BerkArea$price > pr99 | BerkArea$bsqft > sqft99)
rm(BerkArea.new)
BerkArea.new = subset(BerkArea, %notin% BerkArea$price > pr99 | BerkArea$bsqft > sqft99)
BerkArea.new = subset(BerkArea, !(BerkArea$price > pr99 | BerkArea$bsqft > sqft99)
BerkArea.new = subset(BerkArea, BerkArea$price > pr99 | BerkArea$bsqft > sqft99)
BerkArea[-c(BerkArea.new)]
BerkArea - BerkArea.new
`%notin%` <- function(x,y) !(x %in% y)
BerkArea[BerkArea %notin% BerkArea.new]
BerkArea.3 = BerkArea[BerkArea %notin% BerkArea.new]
rm(BerkArea.3)
pricePsqft = BerkArea$Price/BerkArea$sqft
pricePsqft = BerkArea$Price/BerkArea$bsqft
> pricePsqft = BerkArea$Price/BerkArea$sqft
pricePsqft = BerkArea$Price/BerkArea$sqft
rm(%notin%)
pricePsqft
rm(pricePsqft)
BerkArea.new = subset(BerkArea, BerkArea$price < pr99, BerkArea$bsqft < sqft99)
BerkArea.new = subset(BerkArea, BerkArea$price < pr99 & BerkArea$bsqft < sqft99)
spcases = is.na(Berk.Area$bsqft)
spcases = is.na(BarkArea$bsqft)
spcases = is.na(BerkArea$bsqft)
rm(spcases)
BerkArea.3 = BerkArea[BerkArea.new == 0]
BerkArea.3 = BerkArea[!BerkArea.new]
rm(BerkArea.3)
BerkArea.new = subset(BerkArea, BerkArea$price < pr99 & BerkArea$bsqft < sqft99)
BerkArea.new = subset(BerkArea, BerkArea$price < pr99 & !(BerkArea$bsqft > sqft99)
rm(BerkArea.new)
rm(BerkArea.new)
BerkArea.new = subset(BerkArea, BerkArea$price < pr99 & !(BerkArea$bsqft > sqft99)
BerkArea.new = subset(BerkArea, BerkArea$price < pr99 & !(BerkArea$bsqft > sqft99))
BerkArea.not = subset(BerkArea, BerkArea$price > pr99 & BerkArea$bsqft > sqft99)
BerkArea.not = subset(BerkArea, BerkArea$price > pr99 | BerkArea$bsqft > sqft99)
rm(BerkArea.new)
BerkArea.new = subset(BerkArea, !(BerkArea$price > pr99 | BerkArea$bsqft > sqft99))
BerkArea.new = subset(BerkArea)
BerkArea.new = subset(BerkArea, !(BerkArea$price > pr99 | BerkArea$bsqft > sqft99))
BerkArea.new = subset(BerkArea, !(BerkArea.not))
BerkArea$pricePsqft = BerkArea$price/BerkArea$bsqft
br5 = BerkArea$br
max(br5)
for(x in br5)
for(x in br5) if(x < 5) x = 5
max(5)
mean(br5)
rm(br5)
br5 = BerkArea$br
mean(br5)
quantile(br5 probs = 0.9)
quantile(br5, probs = 0.9)
quantile(br5, probs = 0.99)
summary(br5)
for(x in br5) if(x < 5) x = 5
summary(br5)
for(x in br5) {}
for(x in br5) {if(x > 5) {print(x)}}
for(x in br5) {if(x > 5) {x = 5}}
summary(br5)
for(x in br5) {if(x > 5) {print(x)}}
for(x in br5) {if(x > 5) {x <- 5}}
max(br5)
for(x in br5) {if(x < 5) {x += 5}}
for(x in br5) {if(x < 5) {x + 5}}
for(x in br5) {if(x > 5) {br5[x] 5}}
for(x in br5) {if(x > 5) {br5[x] = 5}}
summary(br5)
for(x in br5) {if(x > 4) {br5[x] <- 4}}
summary(br5)
max(br5)
br5 = BerkArea$br
summary(br5)
for(x in br5) {if(x > 3) {br5[x] <- 3}}
summary(br5)
max(br5)
mean(br5)
median(br5)
br5 = BerkArea$br
median(br5)
br = BerkArea$br
rm(br5)
for(x in br) {if(x > 3) {x <- 3}}
for(x in br) {if(x > 3) {br[x] <- 3}}
br = BerkArea$br
for(x in br) {if(br[x] > 3) {br[x] <- 3}}
mean(br)
max(br)
summary(br)
br = BerkArea$br
summary(br)
for(x in br) {if(br(x) > 3) {br(x) <- 3}}
if(br[x] > 3) {br[x] <- 3}
summary(br)
for(x in br) {if(br(x) > 6) {print x}}
for(x in br) {if(br(x) > 3) {print(x)}}
for(x in br) {if(br[x] > 3) {print(br[x])}}
max(br)
for(x in br) {if(br[x] > 4) {print(br[x])}}
for(x in br) {if(br[x] > 4) {print(br[x])}}
for(x in br) {if(br[x] > 3) {print(br[x])}}
for(x in br) {if(br[x] > 5) {print(br[x])}}
br = BerkArea$b
br = BerkArea$br
for(x in br) {if(br[x] > 5) {print(br[x])}}
for(x in br) {if(br[x] > 5) {print(x)}}
br + 1
br
br - 5
for(x in br) {if(br[x] - 5 >= 0) {print(br[x])}}
for(x in br) {print(br[x])}
rm(x)
br5 = BerkArea$br
br
max(br)
br5 = br - 1
br5 = br
for(i in 1:5) print(1:i)
rm(i)
for(x in br) print(x)
rm(x)
for(x in br) if(x = 6) print(x)
for(x in br if(br[x] = 6) print(x)
for(x in br) if(br[x] = 6) print(x)
for(br[x] in br) print(x)
for(x) in br) print(br[x])
for(x) in br) print(br[x])
for(x in br) print(br[x])
br
for(x in br)
if(br[x] > 5)
print(br[x])
for(x in br) {
if(br[x] > 5) {
print(br[x]) }}
for(x in br) {
if(br[x] > 5) {
print(br[x]) }}
max(br)
for(x in br) br[x] = 1
br
br <- br5
rainbow(5)
rCols = rainbow(5)
br5
rm(x)
br5
br - 5
br5
BerkArea
Baerk.not
BerkArea.not
BerkArea.new <- BerkArea[which(!BerkArea.not)]
for(x in br5) {if(br[x] > 5) print(x)}
rm(x)
br5[br5 > 5] <- 5
br5
max(br5)
summary(br5)
summary(br)
rm(br)
rm(br5)
br5 = BerkArea$br
> br5[br5 > 5] <- 5
max(br5)
> br5[br5 > 5] <- 5
br5[br5 > 5] <- 5
max(br5)
median(br5)
mean(br5)
BerkArea.new = subset(BerkArea, BerkArea$price < pr99 & BerkArea$bsqft < sqft99)
BerkArea.new[!BerkArea$price >pp, ]
BerkArea.new[!BerkArea$price >pr99, ]
BerkArea.new = BerkArea[!BerkArea$price >pp, ]
BerkArea.new = BerkArea[!BerkArea$price >pr99, ]
BerkArea.new2 = BerkArea[!BerkArea$bsqft >sqft99, ]
BerkArea.new2 = BerkArea.new[!BerkArea.new$bsqft >sqft99, ]
pr99 = quantile(BerkArea$price, probs = 0.99)
sqft99 = quantile(BerkArea$bsqft, probs = 0.99, na.rm = TRUE)
BerkArea = BerkArea[!BerkArea$price >pr99, ]
BerkArea = BerkArea[!BerkArea$bsqft >sqft99, ]
source('~/.active-rstudio-document', echo=TRUE)
max(br5)
br5
max(br5)
summary(br5)
palette()
rcols
rCols
brCols <- c(br)
brCols <- br
brCols <- c(br5)
rCols(1)
rCols[1]
brCols[brCols == 1] <- rCols[1]
brCols
for(i in 1:5) brCols[brCols == i] <- rCols[i]
brCols
plot(pricePsqft ~ bsqft,
data = BerkArea,
main = "Housing prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
legend(legend = 1:5, fill = rCols, "topright")
View(BerkArea)
plot( pricePsqft ~ year,
data = BerkArea,
main = "Housing prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
# legend(legend = 1:5, fill = rCols, "topright")
legend(legend = 1:5, fill = rCols, "topright")
source('~/Documents/Classes - Fall 2014/Stat 133/git/stat133/hw2/hw2.r', echo=TRUE)
source('~/Documents/Classes - Fall 2014/Stat 133/git/stat133/hw2/hw2.r', echo=TRUE)
col = brCols, pch = 19, cex = 0.5)
plot( pricePsqft ~ year,
plot( pricePsqft ~ year,
data = BerkArea,
main = "Housing prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
plot( pricePsqft ~ year,
data = BerkArea,
main = "Housing prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
plot(pricePsqft ~ year,
data = BerkArea,
main = "Housing prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
plot(pricePsqft ~ bsqft,
data = BerkArea,
main = "Housing prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
source('~/Documents/Classes - Fall 2014/Stat 133/git/stat133/hw2/hw2.r', echo=TRUE)
