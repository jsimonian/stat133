stopifnot(p <= 1 & p >= 0 & r > 0 & c > 0)
m <- matrix(sample(rep(0:2,c(((1-p)*(r)*(c)),(p*r*c/2),(p*r*c/2)))), r, c)
return(m)
}
bml.init <- function(r, c, p){
stopifnot(p <= 1 & p >= 0 & r > 0 & c > 0)
m <- matrix(sample(rep(0:2,c(((1-p)*(r)*(c)),(p*r*c/2),(p*r*c/2)))), r, c)
return(m)
}
m <- bml.init(10, 10, 0.3)
m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) {
for(i in 1:nrow(m)) {
if(m[i,j] == 1) {
if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(i in 1:nrow(m)) {
if(m[i,ncol(m)] == 1) {
if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}}}
list.move2 <- matrix(0, 0, 2)
for(j in 1:ncol(m)) {
if(m[1,j] == 2) {
if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}}}
for(i in 2:(nrow(m))) {
for(j in 1:ncol(m)) {
if(m[i,j] == 2) {
if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(e in 1:nrow(list.remove)) print(list.remove[e,])
m
for(e in 1:nrow(list.remove)) print(list.remove[e,])
for(e in 1:nrow(list.remove)) print(list.remove[e,1])
for(e in 1:nrow(list.remove)) print(list.remove[e,])
1 within 1:3
within(2, 1:3)
within(2, c(1:3))
with(1, m)
within(1,m)
with(1,1:3)
with(4,1:3)
1 in 1:4
within(1:5, 3:6)
with(1:3, 2:4)
with(1:3, >2)
with(1:3, x>2)
with(x = c(1:3), x > 2)
with(m, >2)
2ith(m, 1)
with(m, 2)
with(m, 1)
1 %in% 1:3
m[1,2]
m[3,5]
e
list.remove[e,]
list.remove
list.remove[1,]
list.remove[1,1]
m[list.remove[1,1],list.remove[1,2]]
m
list.remove[1,1],list.remove[1,2]
list.remove[1,1]
list.remove[1,2]
m
for(e in 1:nrow(list.move1))
m[list.move1[e,1],list.move1[e,2]] <- 1}
for(e in 1:nrow(list.move2))
m[list.move2[e,1],list.move2[e,2]] <- 2}
for(e in 1:nrow(list.remove)) {
m[list.remove[e,1],list.remove[e,2]] <- 0}
for(e in 1:nrow(list.move1)){
m[list.move1[e,1],list.move1[e,2]] <- 1}
for(e in 1:nrow(list.move2)){
m[list.move2[e,1],list.move2[e,2]] <- 2}
for(e in 1:nrow(list.remove)) {
m[list.remove[e,1],list.remove[e,2]] <- 0}
m
m <- bml.init(5, 5, 0.4)
bml.init <- function(r, c, p){
stopifnot(p <= 1 & p >= 0 & r > 0 & c > 0)
m <- matrix(sample(rep(0:2,c(((1-p)*(r)*(c)),(p*r*c/2),(p*r*c/2)))), r, c)
return(m)
}
m <- bml.init(5, 5, 0.4)
m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) {
for(i in 1:nrow(m)) {
if(m[i,j] == 1) {
if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(i in 1:nrow(m)) {
if(m[i,ncol(m)] == 1) {
if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}}}
list.move2 <- matrix(0, 0, 2)
for(j in 1:ncol(m)) {
if(m[1,j] == 2) {
if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}}}
for(i in 2:(nrow(m))) {
for(j in 1:ncol(m)) {
if(m[i,j] == 2) {
if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(e in 1:nrow(list.move1)){
m[list.move1[e,1],list.move1[e,2]] <- 1}
for(e in 1:nrow(list.move2)){
m[list.move2[e,1],list.move2[e,2]] <- 2}
for(e in 1:nrow(list.remove)) {
m[list.remove[e,1],list.remove[e,2]] <- 0}
m
m.new <- m
checkequals(0,1)
load("runit")
load("RUnit")
load('RUnit')
library("RUnit", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library('RUnit')
detach("package:RUnit", unload=TRUE)
library('RUnit')
checkequals(1:3, 1:3)
checkEquals(1, 1)
checkEquals(1, 3)
checkEquals(1, 1.5)
[checkEquals(1, 4)]
is.true(1)
m == m.new
[m == m.new]
m == m.new
sum(m == m.new)
all.equal(m, m.new)
!all.equal(m, m.new)
grid.new <- !all.equal(m, m.new)
m
m.new <- m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) {
for(i in 1:nrow(m)) {
if(m[i,j] == 1) {
if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(i in 1:nrow(m)) {
if(m[i,ncol(m)] == 1) {
if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}}}
list.move2 <- matrix(0, 0, 2)
for(j in 1:ncol(m)) {
if(m[1,j] == 2) {
if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}}}
for(i in 2:(nrow(m))) {
for(j in 1:ncol(m)) {
if(m[i,j] == 2) {
if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(e in 1:nrow(list.move1)){
m.new[list.move1[e,1],list.move1[e,2]] <- 1}
for(e in 1:nrow(list.move2)){
m.new[list.move2[e,1],list.move2[e,2]] <- 2}
for(e in 1:nrow(list.remove)) {
m.new[list.remove[e,1],list.remove[e,2]] <- 0}
grid.new <- !all.equal(m, m.new)
m <- m.new
m.new <- m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) {
for(i in 1:nrow(m)) {
if(m[i,j] == 1) {
if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(i in 1:nrow(m)) {
if(m[i,ncol(m)] == 1) {
if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}}}
list.move2 <- matrix(0, 0, 2)
for(j in 1:ncol(m)) {
if(m[1,j] == 2) {
if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}}}
for(i in 2:(nrow(m))) {
for(j in 1:ncol(m)) {
if(m[i,j] == 2) {
if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(e in 1:nrow(list.move1)){
m.new[list.move1[e,1],list.move1[e,2]] <- 1}
for(e in 1:nrow(list.move2)){
m.new[list.move2[e,1],list.move2[e,2]] <- 2}
for(e in 1:nrow(list.remove)) {
m.new[list.remove[e,1],list.remove[e,2]] <- 0}
grid.new <- !all.equal(m, m.new)
all.equal(m, m.new)
m
m.new <- m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) {
for(i in 1:nrow(m)) {
if(m[i,j] == 1) {
if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(i in 1:nrow(m)) {
if(m[i,ncol(m)] == 1) {
if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}}}
list.move2 <- matrix(0, 0, 2)
for(j in 1:ncol(m)) {
if(m[1,j] == 2) {
if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}}}
for(i in 2:(nrow(m))) {
for(j in 1:ncol(m)) {
if(m[i,j] == 2) {
if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(e in 1:nrow(list.move1)){
m.new[list.move1[e,1],list.move1[e,2]] <- 1}
for(e in 1:nrow(list.move2)){
m.new[list.move2[e,1],list.move2[e,2]] <- 2}
for(e in 1:nrow(list.remove)) {
m.new[list.remove[e,1],list.remove[e,2]] <- 0}
grid.new <- isTRUE(!all.equal(m, m.new))
grid.new <- isTRUE(!all.equal(m, m.new))
m.new <- m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) {
for(i in 1:nrow(m)) {
if(m[i,j] == 1) {
if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(i in 1:nrow(m)) {
if(m[i,ncol(m)] == 1) {
if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}}}
list.move2 <- matrix(0, 0, 2)
for(j in 1:ncol(m)) {
if(m[1,j] == 2) {
if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}}}
for(i in 2:(nrow(m))) {
for(j in 1:ncol(m)) {
if(m[i,j] == 2) {
if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(e in 1:nrow(list.move1)){
m.new[list.move1[e,1],list.move1[e,2]] <- 1}
for(e in 1:nrow(list.move2)){
m.new[list.move2[e,1],list.move2[e,2]] <- 2}
for(e in 1:nrow(list.remove)) {
m.new[list.remove[e,1],list.remove[e,2]] <- 0}
grid.new <- !isTRUE(all.equal(m, m.new))
m <- m.new
m
bml.step <- function(m){
m.new <- m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) {
for(i in 1:nrow(m)) {
if(m[i,j] == 1) {
if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(i in 1:nrow(m)) {
if(m[i,ncol(m)] == 1) {
if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}}}
list.move2 <- matrix(0, 0, 2)
for(j in 1:ncol(m)) {
if(m[1,j] == 2) {
if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}}}
for(i in 2:(nrow(m))) {
for(j in 1:ncol(m)) {
if(m[i,j] == 2) {
if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}}}}
for(e in 1:nrow(list.move1)){
m.new[list.move1[e,1],list.move1[e,2]] <- 1}
for(e in 1:nrow(list.move2)){
m.new[list.move2[e,1],list.move2[e,2]] <- 2}
for(e in 1:nrow(list.remove)) {
m.new[list.remove[e,1],list.remove[e,2]] <- 0}
grid.new <- !isTRUE(all.equal(m, m.new))
m <- m.new
return(list(m, grid.new))
}
bml.step(m)
bml.step(m)
bml.step(m)
bml.step(m)
bml.step(m)
bml.step(m)
bml.step(m)
bml.step(m)
m
list <- m
list
bml.step(list)
bml.step(list)
bml.step(list)
bml.step(list)
a <- 1 & b <-2
a = 1, b = 2
a = 1 b = 2
bml.step <- function(m){
m.new <- m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
list.move2 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) for(i in 1:nrow(m)) if(m[i,j] == 1) if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}
for(i in 1:nrow(m)) if(m[i,ncol(m)] == 1) if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}
for(j in 1:ncol(m)) if(m[1,j] == 2) if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}
for(i in 2:(nrow(m))) for(j in 1:ncol(m)) if(m[i,j] == 2) if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}
for(e in 1:nrow(list.move1)) m.new[list.move1[e,1],list.move1[e,2]] <- 1
for(e in 1:nrow(list.move2)) m.new[list.move2[e,1],list.move2[e,2]] <- 2
for(e in 1:nrow(list.remove)) m.new[list.remove[e,1],list.remove[e,2]] <- 0
grid.new <- !isTRUE(all.equal(m, m.new))
m <- m.new
return(list(m, grid.new))
}
m
bml.step(m)
bml.step(m[1])
bml.step(m)[1]
bml.step(m)[1] == m
bml.step(m)[1,
]
bml.step(m)[1,]
bml.step(m)[,q]
bml.step(m)[1]
bml.init <- function(r, c, p){
stopifnot(p <= 1 & p >= 0 & r > 0 & c > 0)
m <- matrix(sample(rep(0:2,c(((1-p)*(r)*(c)),(p*r*c/2),(p*r*c/2)))), r, c)
return(m)
}
#### Function to move the system one step (east and north)
## Input : a matrix [m] of the same type as the output from bml.init()
## Output : TWO variables, the updated [m] and a logical variable
## [grid.new] which should be TRUE if the system changed, FALSE otherwise.
## NOTE : the function should move the red cars once and the blue cars once,
## you can write extra functions that do just a step north or just a step east.
bml.step <- function(m){
m.new <- m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
list.move2 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) for(i in 1:nrow(m)) if(m[i,j] == 1) if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}
for(i in 1:nrow(m)) if(m[i,ncol(m)] == 1) if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}
for(j in 1:ncol(m)) if(m[1,j] == 2) if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}
for(i in 2:(nrow(m))) for(j in 1:ncol(m)) if(m[i,j] == 2) if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}
for(e in 1:nrow(list.move1)) m.new[list.move1[e,1],list.move1[e,2]] <- 1
for(e in 1:nrow(list.move2)) m.new[list.move2[e,1],list.move2[e,2]] <- 2
for(e in 1:nrow(list.remove)) m.new[list.remove[e,1],list.remove[e,2]] <- 0
grid.new <- !isTRUE(all.equal(m, m.new))
m <- m.new
return(list(m, grid.new))
}
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.init <- function(r, c, p){
stopifnot(p <= 1 & p >= 0 & r > 0 & c > 0)
m <- matrix(sample(rep(0:2,c(((1-p)*(r)*(c)),(p*r*c/2),(p*r*c/2)))), r, c)
return(m)
}
#### Function to move the system one step (east and north)
## Input : a matrix [m] of the same type as the output from bml.init()
## Output : TWO variables, the updated [m] and a logical variable
## [grid.new] which should be TRUE if the system changed, FALSE otherwise.
## NOTE : the function should move the red cars once and the blue cars once,
## you can write extra functions that do just a step north or just a step east.
bml.step <- function(m){
m.new <- m
list.remove <- matrix(0, 0, 2)
list.move1 <- matrix(0, 0, 2)
list.move2 <- matrix(0, 0, 2)
for(j in 1:(ncol(m)-1)) for(i in 1:nrow(m)) if(m[i,j] == 1) if(!m[i,(j+1)]) {
list.move1 <- rbind(list.move1, c(i,(j+1)))
list.remove <- rbind(list.remove, c(i,j))}
for(i in 1:nrow(m)) if(m[i,ncol(m)] == 1) if(!m[i,1]) {
list.move1 <- rbind(list.move1, c(i, 1))
list.remove <- rbind(list.remove, c(i,ncol(m)))}
for(j in 1:ncol(m)) if(m[1,j] == 2) if(!m[nrow(m),j]) {
list.move2 <- rbind(list.move2, c(nrow(m),j))
list.remove <- rbind(list.remove, c(1,j))}
for(i in 2:(nrow(m))) for(j in 1:ncol(m)) if(m[i,j] == 2) if(!m[(i-1),j]) {
list.move2 <- rbind(list.move2, c((i-1),j))
list.remove <- rbind(list.remove, c(i,j))}
for(e in 1:nrow(list.move1)) m.new[list.move1[e,1],list.move1[e,2]] <- 1
for(e in 1:nrow(list.move2)) m.new[list.move2[e,1],list.move2[e,2]] <- 2
for(e in 1:nrow(list.remove)) m.new[list.remove[e,1],list.remove[e,2]] <- 0
grid.new <- !isTRUE(all.equal(m, m.new))
m <- m.new
return(list(m, grid.new))
}
bml.step(m)[1]
bml.step(m)[1]
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.init(10,10,0.2))
bml.step(bml.step(bml.init(10,10,2))[1])
bml.step(bml.step(bml.init(10,10,2)))
bml.step(bml.init(10,10,2))
bml.step(bml.step(bml.init(10,10,0.2))[1])
bml.step(bml.init(10,10,0.2))[1]
bml.step(bml.step(bml.init(10,10,0.2))[1])
bml.step(bml.step(bml.init(10,10,0.2))[1])
r <- bml.step(bml.init(10,10,0.2))
r
r[1]
r <- bml.step(bml.init(10,10,0.2))[1]
r
as.vector(bml.step(bml.init(10,10,0.2)))
r <- as.vector(bml.step(bml.init(10,10,0.2))[1])
r
bml.step(bml.init(10,10,0.2))[1][1]
bml.step(bml.init(10,10,0.2))[1][1][1]
as.matrix(bml.step(bml.init(10,10,0.2))[1])
as.numberic(bml.step(bml.init(10,10,0.2))[1])
as.numeric(bml.step(bml.init(10,10,0.2))[1])
bml.step(bml.init(10,10,0.2))[1]
bml.step(bml.init(10,10,0.2))[1]
bml.step(bml.init(10,10,0.2))[1]
test <- bml.step(bml.init(10,10,0.2))[1]
bml.step(bml.init(test))[1]
bml.step(test)
test
bml.step(test)
bml.step(test[1])
bml.step(test[,1])
test[1]
test
as.matrix(test)
as.vecotr(test)
as.vector(test)
as.vector(test[1])
as.array(test)
