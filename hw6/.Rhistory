#################################################################################
#### Functions for BML Simulation Study
#### Initialization function.
## Input : size of grid [r and c] and probability [p]
## Output : A matrix [m] with entries 0 (no cars) 1 (red cars) or 2 (blue cars)
## that stores the state of the system (i.e. location of red and blue cars)
bml.init <- function(r, c, p){
stopifnot(p <= 1 & p >= 0 & r > 0 & c > 0)
m <- matrix(sample(c(0,1,2), replace = T, r*c, prob = c((1-p),p/2,p/2)), r, c)
return(m)
}
#### Function to move the system one step (east and north)
## Input : a matrix [m] of the same type as the output from bml.init()
## Output : TWO variables, the updated [m] and a logical variable
## [grid.new] which should be TRUE if the system changed, FALSE otherwise.
## NOTE : the function should move the red cars once and the blue cars once,
## you can write extra functions that do just a step north or just a step east.
bml.step <- function(m) {
if(ncol(m) != 1) {
left = matrix(c(m[,(2:ncol(m))], m[,1]), nrow(m), ncol(m))
right = matrix(c(m[,ncol(m)], m[,(1:ncol(m)-1)]), nrow(m), ncol(m))
m.new1 = matrix(0, nrow(m), ncol(m)) + (m == 1 & left != 0) + (right == 1 & m == 0)
}
if(ncol(m) == 1) {
m.new1 = matrix(0, nrow(m), ncol(m)) + m == 1
}
if(nrow(m) != 1) {
down = matrix(c(m[nrow(m),], t(m[(1:nrow(m)-1),])), nrow(m), ncol(m), byrow = T)
up = matrix(c(t(m[(2:nrow(m)),]), m[1,]), nrow(m), ncol(m), byrow = T)
down.new = matrix(c(m.new1[nrow(m),], t(m.new1[(1:nrow(m)-1),])), nrow(m), ncol(m), byrow = T)
m.new2 = m.new1 + 2*((m == 2 & (down == 2 | down.new != 0)) + (up == 2 & m != 2 & m.new1 == 0))
}
if(nrow(m) == 1) {
m.new2 = m.new1 + 2*(m == 2)
}
grid.new <- !isTRUE(all.equal(m, m.new2))
m <- m.new2
return(list(m, grid.new))
}
#### Function to do a simulation for a given set of input parameters
## Input : size of grid [r and c] and density [p]
## Output : *up to you* (e.g. number of steps taken, did you hit gridlock, ...)
bml.sim <- function(r, c, p){
trial = 0
locked = F
mat <- bml.init(r, c, p)
if(sum(mat) == 0) return(list(mat, 'matrix is empty', 0, NA))
while(locked == F) {
#image(t(apply(mat, 2, rev)), col = c('white','red','blue'))
if(trial == 1000) return(list(mat, '1000 trials conducted, gridlock not reached', 0, NA))
output = bml.step(mat)
mat = output[[1]]
locked = !output[[2]]
trial = trial + 1
print(trial)
}
return(list(mat, sprintf("Number of trials before gridlock: %s", trial), 1, trial))
}
bml.init(10, 10, 0.5)
x<- bml.init(10, 10, 0.5)
x
bml.step(x)
bml.sim(10, 10, 0.6)
bml.sim <- function(r, c, p){
trial = 0
locked = F
mat <- bml.init(r, c, p)
if(sum(mat) == 0) return(list(mat, 'matrix is empty', 0, NA))
while(locked == F) {
image(t(apply(mat, 2, rev)), col = c('white','red','blue'))
if(trial == 1000) return(list(mat, '1000 trials conducted, gridlock not reached', 0, NA))
output = bml.step(mat)
mat = output[[1]]
locked = !output[[2]]
trial = trial + 1
print(trial)
}
return(list(mat, sprintf("Number of trials before gridlock: %s", trial), 1, trial))
}
bml.sim(10, 10, 0.6)
bml.sim <- function(r, c, p){
trial = 0
locked = F
mat <- bml.init(r, c, p)
if(sum(mat) == 0) return(list(mat, 'matrix is empty', 0, NA))
while(locked == F) {
#image(t(apply(mat, 2, rev)), col = c('white','red','blue'))
if(trial == 1000) return(list(mat, '1000 trials conducted, gridlock not reached', 0, NA))
output = bml.step(mat)
mat = output[[1]]
locked = !output[[2]]
trial = trial + 1
print(trial)
}
return(list(mat, sprintf("Number of trials before gridlock: %s", trial), 1, trial))
}
bml.sim(100, 100, 0.6)
bml.sim <- function(r, c, p){
trial = 0
locked = F
mat <- bml.init(r, c, p)
if(sum(mat) == 0) return(list(mat, 'matrix is empty', 0, NA))
while(locked == F) {
image(t(apply(mat, 2, rev)), col = c('white','red','blue'))
if(trial == 1000) return(list(mat, '1000 trials conducted, gridlock not reached', 0, NA))
output = bml.step(mat)
mat = output[[1]]
locked = !output[[2]]
trial = trial + 1
print(trial)
}
return(list(mat, sprintf("Number of trials before gridlock: %s", trial), 1, trial))
}
bml.sim(100, 100, 0.6)
